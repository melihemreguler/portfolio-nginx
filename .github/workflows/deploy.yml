name: Deploy Reverse Proxy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          #!/bin/bash

          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Docker is not installed. Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            echo "Docker installed. Please log out and back in, then re-run this script."
            exit 1
          fi

          # Check if Docker Compose plugin is installed
          if ! docker compose version &> /dev/null; then
            echo "Docker Compose plugin not found. Installing it..."
            mkdir -p ~/.docker/cli-plugins/
            curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) \
              -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
          fi

          # Define repo directory
          REPO_DIR="$HOME/portfolio-nginx"

          # Clone repository if it doesn't exist
          if [ ! -d "$REPO_DIR" ]; then
            echo "Repository not found. Cloning..."
            git clone https://github.com/${{ github.repository }}.git "$REPO_DIR"
          fi

          cd "$REPO_DIR"

          # Pull latest changes
          git pull origin main

          # Create necessary directories
          mkdir -p ./certs ./html ./letsencrypt ./logs
          chmod 755 ./certs ./html

          # Create environment file
          echo "LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}" > .env

          # Stop existing containers (if running)
          docker compose down || true

          # Clean old certs and webroot content
          sudo rm -rf ./certs/*
          sudo rm -rf ./html/*

          # Pull and start containers fresh
          docker compose pull
          docker compose up -d

          echo "Waiting for containers to initialize..."
          sleep 30

          # Force certificate generation
          echo "Forcing SSL certificate generation..."
          docker exec nginx-letsencrypt /app/signal_le_service

          echo "Waiting for certificate generation..."
          sleep 30

          # Tail nginx-letsencrypt logs for SSL status
          docker logs nginx-letsencrypt --tail 50

          echo "Deployment and SSL fix completed successfully!"
        EOF
